import { factories } from '@strapi/strapi';

export default factories.createCoreController('api::referral.referral', ({ strapi }) => ({
  // Cr√©er un parrainage avec un code
  async createReferral(ctx) {
    try {
      const { referralCode } = ctx.request.body;
      const userId = ctx.state.user.id;

      // V√©rifier si l'utilisateur existe
      const referrer = await strapi.entityService.findOne('plugin::users-permissions.user', userId);
      if (!referrer) {
        return ctx.badRequest('Utilisateur introuvable');
      }

      // V√©rifier si l'utilisateur a d√©j√† un code de parrainage
      if (referrer.referralCode) {
        return ctx.badRequest('Vous avez d√©j√† un code de parrainage');
      }

      // G√©n√©rer un code unique si non fourni
      const code = referralCode || this.generateReferralCode();

      // V√©rifier l'unicit√© du code dans la table des utilisateurs (pas dans referral)
      const existingUser = await strapi.entityService.findMany('plugin::users-permissions.user', {
        filters: { referralCode: code }
      });

      if (existingUser.length > 0) {
        return ctx.badRequest('Code de parrainage d√©j√† existant');
      }

      // Mettre √† jour le code de parrainage de l'utilisateur
      await strapi.entityService.update('plugin::users-permissions.user', userId, {
        data: { referralCode: code }
      });

      ctx.send({ 
        message: 'Code de parrainage cr√©√© avec succ√®s',
        referralCode: code 
      });
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation code parrainage:', error);
      ctx.throw(500, 'Erreur lors de la cr√©ation du code de parrainage');
    }
  },

  // Utiliser un code de parrainage
  async useReferralCode(ctx) {
    try {
      const { referralCode } = ctx.request.body;
      const userId = ctx.state.user.id;

      // Trouver l'utilisateur parrain
      const referrer = await strapi.entityService.findMany('plugin::users-permissions.user', {
        filters: { referralCode }
      });

      if (referrer.length === 0) {
        return ctx.badRequest('Code de parrainage invalide');
      }

      const referrerUser = referrer[0];

      // V√©rifier que l'utilisateur ne se parraine pas lui-m√™me
      if (referrerUser.id === userId) {
        return ctx.badRequest('Vous ne pouvez pas utiliser votre propre code');
      }

      // V√©rifier si l'utilisateur n'a pas d√©j√† √©t√© parrain√©
      const existingReferral = await strapi.entityService.findMany('api::referral.referral', {
        filters: { referred: userId }
      });

      if (existingReferral.length > 0) {
        return ctx.badRequest('Vous avez d√©j√† √©t√© parrain√©');
      }

      // Cr√©er le parrainage
      const referral = await strapi.entityService.create('api::referral.referral', {
        data: {
          referrer: referrerUser.id,
          referred: userId,
          referralCode,
          status: 'completed',
          rewardAmount: 10,
          completedAt: new Date()
        }
      });

      // Mettre √† jour les statistiques du parrain
      const currentRewards = referrerUser.referralRewards || 0;
      await strapi.entityService.update('plugin::users-permissions.user', referrerUser.id, {
        data: {
          totalReferrals: (referrerUser.totalReferrals || 0) + 1,
          referralRewards: parseFloat(currentRewards.toString()) + 10
        }
      });

      // Mettre √† jour l'utilisateur parrain√©
      await strapi.entityService.update('plugin::users-permissions.user', userId, {
        data: { referredBy: referrerUser.id }
      });

      ctx.send({
        message: 'Parrainage effectu√© avec succ√®s',
        referral
      });
    } catch (error) {
      ctx.throw(500, error);
    }
  },

  // R√©cup√©rer les statistiques de parrainage
  async getReferralStats(ctx) {
    try {
      const userId = ctx.state.user.id;

      const user: any = await strapi.entityService.findOne('plugin::users-permissions.user', userId);
      
      // R√©cup√©rer les parrainages effectu√©s
      const referralsMade = await strapi.entityService.findMany('api::referral.referral', {
        filters: { referrer: userId },
        populate: ['referred']
      });

      // R√©cup√©rer les parrainages re√ßus
      const referralsReceived = await strapi.entityService.findMany('api::referral.referral', {
        filters: { referred: userId },
        populate: ['referrer']
      });

      // R√©cup√©rer l'utilisateur qui l'a parrain√©
      const referredByUser = user.referredBy ? 
        await strapi.entityService.findOne('plugin::users-permissions.user', user.referredBy) : 
        null;

      const stats = {
        referralCode: user.referralCode,
        totalReferrals: user.totalReferrals || 0,
        referralRewards: user.referralRewards || 0,
        referralsMade: referralsMade,
        referralsReceived: referralsReceived,
        referredBy: referredByUser
      };

      ctx.send(stats);
    } catch (error) {
      ctx.throw(500, error);
    }
  },
  async useRewards(ctx) {
    try {
      const { amount } = ctx.request.body;
      const userId = ctx.state.user.id;

      console.log('üí∞ Backend: Utilisation r√©compenses - userId:', userId, 'amount:', amount);

      // V√©rifier si l'utilisateur existe
      const user = await strapi.entityService.findOne('plugin::users-permissions.user', userId);
      if (!user) {
        return ctx.badRequest('Utilisateur introuvable');
      }

      const currentRewards = user.referralRewards || 0;
      console.log('üí∞ Backend: R√©compenses actuelles:', currentRewards);

      // V√©rifier que le montant est valide
      if (!amount || amount <= 0) {
        return ctx.badRequest('Montant invalide');
      }

      if (amount > currentRewards) {
        return ctx.badRequest('Montant sup√©rieur aux r√©compenses disponibles');
      }

      // D√©duire le montant des r√©compenses
      const newRewardBalance = Math.max(0, currentRewards - amount);
      
      await strapi.entityService.update('plugin::users-permissions.user', userId, {
        data: { 
          referralRewards: newRewardBalance
        }
      });

      console.log('‚úÖ Backend: R√©compenses d√©duites avec succ√®s. Nouveau solde:', newRewardBalance);

      ctx.send({ 
        message: 'R√©compenses utilis√©es avec succ√®s',
        amountUsed: amount,
        remainingRewards: newRewardBalance
      });
    } catch (error) {
      console.error('‚ùå Backend: Erreur utilisation r√©compenses:', error);
      ctx.throw(500, 'Erreur lors de l\'utilisation des r√©compenses');
    }
  },

  generateReferralCode() {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
  }

}));
